# # Azure Pipeline configuration for .NET project
# trigger:
# - main

# pool:
#    vmImage: 'windows-latest'

# variables:
#   BuildConfiguration: 'Release'
#   RestoreBuildProjects: '**/*.csproj'

# steps:
# # Step 1: Checkout the code from the repository
# - checkout: self

# # Step 2: Restore dependencies
# - task: DotNetCoreCLI@2
#   displayName: 'Restore'
#   inputs:
#     command: 'restore'
#     projects: '$(RestoreBuildProjects)'

# # Step 3: Build the project
# - task: DotNetCoreCLI@2
#   displayName: 'Build'
#   inputs:
#     command: 'build'
#     projects: '$(RestoreBuildProjects)'
#     arguments: '--configuration $(BuildConfiguration)'

# # Step 4: Publish the project
# - task: DotNetCoreCLI@2
#   displayName: 'Publish'
#   inputs:
#     command: 'publish'
#     publishWebProjects: True
#     arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
#     zipAfterPublish: True

# # Step 5: Publish build artifacts
# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Artifact'
#   inputs:
#     PathtoPublish: '$(build.artifactstagingdirectory)'
#   condition: succeededOrFailed()



# Define variables
variables:
  BuildConfiguration: 'Release'
  RestoreBuildProjects: '**/*.csproj'

# Specify the trigger
trigger:
  branches:
    include:
      - main

# Specify the pool and agent
pool:
  vmImage: 'windows-latest'

# Define the stages
stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
    # Step 1: Checkout the code from the repository
    - checkout: self
      displayName: 'Checkout Code'

    # Step 2: Restore dependencies
    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '$(RestoreBuildProjects)'

    # Step 3: Build the project
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(RestoreBuildProjects)'
        arguments: '--configuration $(BuildConfiguration)'

    # Step 4: Publish the project
    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: True

    # Step 5: Publish build artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      condition: succeededOrFailed()

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy Job'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          # Download artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifacts'
            inputs:
              artifact: 'drop'
              path: '$(System.ArtifactsDirectory)'

          # Azure Web App Deployment
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure Web App Deploy'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Free Trial(c76eba7d-3791-4b1a-ac0a-e3914e169a45)'
              appType: 'webApp'
              WebAppName: 'aryanproject'
              packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'

          # Placeholder for additional deployment steps
          - script: echo 'Deploying...'
